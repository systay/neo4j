
[[cypher-query-lang]]
Cypher Query Language
=====================

CAUTION: This is an experimental feature.

A new query language, code-named ``Cypher'', has been added to Neo4j.
It allows for expressive and efficient querying of the graph store without having to write traversers in code.

Cypher is designed to be a humane query language, suitable for both 
developers and (importantly, we think) operations professionals who 
want to make ad-hoc queries on the database. Its constructs are based 
on English prose and neat iconography, which helps to make it (somewhat) 
self-explanatory.

Cypher is inspired by a number of different approaches and builds upon 
established practices for expressive querying. Most of the keywords like
+WHERE+ and +ORDER BY+ are inspired by http://en.wikipedia.org/wiki/SQL[SQL].
Pattern matching borrows expression approaches from http://en.wikipedia.org/wiki/SPARQL[SPARQL].
Regular expression matching is implemented using the http://www.scala-lang.org/[Scala programming language].

Cypher is a declarative language. It focuses on the clarity of expressing _WHAT_
to retrieve from a graph, not _HOW_ to do it, in contrast to imperative languages like Java and Scala,
and scripting languages like http://gremlin.tinkerpop.org[Gremlin] (supported via the <<gremlin-plugin>>) 
and http://neo4j.rubyforge.org/[the JRuby Neo4j bindings]. This makes the concern of how to optimize
queries in implementation detail not exposed to the user.

The query language is comprised of several distinct parts.

Let's see three of them in action:

For example, here is a query which finds a user called John in 
an index and then traverses the graph looking for friends of 
Johns friends (though not his direct friends) before returning 
both John and any friends-of-friends that are found.

image::friends-of-friends.png["Cypher Example with index lookup",scaledwidth="80%"]

Next up we will add filtering to set all four parts in motion:

In this next example, we take a list of users (by node ID) and traverse 
the graph looking for those other users that have an outgoing +friend+ relationship, 
returning only those followed users who are older than 18.

image::basic-filtering.png["Cypher Example with Node id",scaledwidth="80%"]

In Java, using the query language looks something like this:

[snippet,java]
----
component=neo4j-cypher
source=org/neo4j/cypher/javacompat/JavaExecutionEngineTests.java
tag=JavaQuery
classifier=test-sources
----

:leveloffset: 2

include::ql/start/index.txt[]

:leveloffset: 2

include::ql/match/index.txt[]

:leveloffset: 2

include::ql/where/index.txt[]

:leveloffset: 2

include::ql/return/index.txt[]

:leveloffset: 2

include::ql/aggregation/index.txt[]

:leveloffset: 2

include::ql/order/index.txt[]

:leveloffset: 2

include::ql/from/index.txt[]

:leveloffset: 2

include::ql/limit/index.txt[]

:leveloffset: 2

include::ql/skip/index.txt[]

