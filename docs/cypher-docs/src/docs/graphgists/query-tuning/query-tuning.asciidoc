[[query-tuning]]
= Query Tuning

A short introduction of query tuning in Cypher.
In particular, we explain the basic concept of how to make sure that your queries run as fast as possible by using all the feature given by Neo4j.
You can read more about the <<execution-plans, execution plan operators>> shown on this page.

== General information

The Cypher query compiler, nick-named Ronja, is a cost-based optimizer, CBO for short.
A CBO produces many different alternative execution plans for a given query and calculates the cost for the different plans.
The cost of a plan is a measure of how expensive, in resources such as heap and I/O access, running that plan would be.
For cost estimation, Neo4j uses statistical numbers such as how many nodes have which labels on them, and how often a relationship starts or ends on nodes with different labels.
All the statistical numbers are in one way or another tied to labels and relationship types.

[TIP]
Being explicit about what types and labels you expect relationships and nodes to have in your query helps Neo4j use the best possible statistical information, which leads to better execution plans.
This means that when you know that a relationship can only be of a certain type, you should add that to the query.
The same goes for labels, where declaring labels on both the start and end nodes of a relationship helps Neo4j find the best way to execute the statement.

== Example of query tuning

We start with the following data set:

//setup
[source,cypher]
----
CREATE (adam:Person {name: 'Adam'})
CREATE (pernilla:Person {name: 'Pernilla'})
CREATE (david:Person {name: 'David'})
CREATE (adam)-[:FRIEND]->(pernilla)
CREATE (pernilla)-[:FRIEND]->(david)
----

And we want to do query to find Pernilla. We might start with the following query:

[source,cypher]
----
cypher 2.2-cost
MATCH (p {name:"Pernilla"})
RETURN p
----

As the number of nodes in the database increase this query will slow down so we'd have a look at the profile output to try and work out why that is:

//profile

The inclusion of <<query-plan-all-nodes-scan, All Nodes Scan>> indicates that the query planner scanned all the nodes in the database, checking the +name+ property on each one.

When searching for the start nodes for our query we should specify a label to narrow down the search area.
For this query we can include a +Person+ like so:

[source,cypher]
----
cypher 2.2-cost
MATCH (p:Person {name:"Pernilla"})
RETURN p
----

This query will be faster than the first one but as the number of people increase we notice that our query slows down.

Again we can look at the profile output to work out why:

//profile

The <<query-plan-node-by-label-scan, Label Scan>> operator indicates that when we look up +Pernilla+ a linear scan of all the people in the database is being executed.

If we're going to be looking up people by name frequently then we'll want to create an index on the +name+ property for the +Person+ label:

[source,cypher]
----
CREATE INDEX ON :Person(name)
----

Now if we run the query again it will run more quickly:

[source,cypher]
----
cypher 2.2-cost
MATCH (p:Person {name:"Pernilla"})
RETURN p
----

Let's look at the profile output again:

//profile

Now the query planner makes use of the <<query-plan-node-index-seek, Node Index Seek>> operator which does an index lookup and therefore gives us a performance improvement as the number of people increases.
