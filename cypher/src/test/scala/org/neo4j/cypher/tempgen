org.neo4j.cypher.internal.compiler.v2_3.birk.Javac$CompilationError: package org.neo4j.cypher.internal.compiler.v2_3.birk.generated;

import org.neo4j.helpers.collection.Visitor;
import org.neo4j.function.Supplier;
import org.neo4j.graphdb.GraphDatabaseService;
import org.neo4j.kernel.api.Statement;
import org.neo4j.kernel.api.exceptions.KernelException;
import org.neo4j.kernel.api.ReadOperations;
import org.neo4j.cypher.internal.compiler.v2_3.birk.ResultRowImpl;
import org.neo4j.cypher.internal.compiler.v2_3.executionplan.CompiledExecutionResult;
import org.neo4j.graphdb.Result.ResultRow;
import org.neo4j.graphdb.Result.ResultVisitor;
import org.neo4j.graphdb.Result;
import org.neo4j.graphdb.Transaction;
import org.neo4j.cypher.internal.compiler.v2_3.planDescription.Id;
import org.neo4j.cypher.internal.compiler.v2_3.planDescription.InternalPlanDescription;
import org.neo4j.cypher.internal.compiler.v2_3.ExecutionMode;
import org.neo4j.cypher.internal.compiler.v2_3.executionplan.CompletionListener;
import org.neo4j.cypher.internal.compiler.v2_3.birk.QueryExecutionTracer;
import org.neo4j.cypher.internal.compiler.v2_3.birk.QueryExecutionEvent;
import java.util.Map;
import java.util.List;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.neo4j.collection.primitive.Primitive;
import org.neo4j.collection.primitive.PrimitiveLongIntMap;
import org.neo4j.collection.primitive.PrimitiveLongIterator;
import org.neo4j.collection.primitive.hopscotch.LongKeyIntValueTable;

public class GeneratedExecutionPlan1 extends CompiledExecutionResult
{
private final ReadOperations ro;
private final GraphDatabaseService db;
private final Map<String, Object> params;
private final QueryExecutionTracer tracer;

public static final Id OP1_NodeHashJoin;
public static final Id OP2_AllNodesScan;
public static final Id OP4_AllNodesScan;
public static final Id OP3_ProduceResult;

public GeneratedExecutionPlan1( CompletionListener completion, Statement statement, GraphDatabaseService db, ExecutionMode executionMode, Supplier<InternalPlanDescription> description, QueryExecutionTracer tracer, Map<String, Object> params )
{
  super( completion, statement, executionMode, description );
  this.ro = statement.readOperations();
  this.db = db;
  this.tracer = tracer;
  this.params = params;
}


@Override
public List<String> javaColumns( )
{
return Arrays.asList( "a" );
}

@Override
public <E extends Exception> void accept(final ResultVisitor<E> visitor)
{
final ResultRowImpl row = new ResultRowImpl(db);


try
{
PrimitiveLongIntMap v2 = null;
try ( QueryExecutionEvent event_OP1_NodeHashJoin = tracer.executeOperator( OP1_NodeHashJoin ) )
{
v2 = m1();
}
try ( QueryExecutionEvent event_OP4_AllNodesScan = tracer.executeOperator( OP4_AllNodesScan ) )
{
PrimitiveLongIterator v4Iter = ro.nodesGetAll();
event_OP4_AllNodesScan.dbHit();
while ( v4Iter.hasNext() )
{
event_OP4_AllNodesScan.dbHit();
event_OP4_AllNodesScan.row();
final long v4 = v4Iter.next();


try ( QueryExecutionEvent event_OP1_NodeHashJoin = tracer.executeOperator( OP1_NodeHashJoin ) )
{
int v3 = v2.get( v4 );
if ( v3 != LongKeyIntValueTable.NULL )
{
for ( int i = 0; i < v3; i++ )
{
event_OP1_NodeHashJoin.row();
row.setNode("a", v4);


try ( QueryExecutionEvent event_OP3_ProduceResult = tracer.executeOperator( OP3_ProduceResult ) )
{
if ( !visitor.visit(row) )
{
return;
}
event_OP3_ProduceResult.row();
}
}
}
}
}
}
success();
}
catch (Exception e)
{
//TODO proper error handling
e.printStackTrace();
throw new RuntimeException( e );
}
finally
{
close();
}
}
private PrimitiveLongIntMap m1() throws KernelException
{

final PrimitiveLongIntMap v2 = Primitive.longIntMap();
try ( QueryExecutionEvent event_OP2_AllNodesScan = tracer.executeOperator( OP2_AllNodesScan ) )
{
PrimitiveLongIterator v1Iter = ro.nodesGetAll();
event_OP2_AllNodesScan.dbHit();
while ( v1Iter.hasNext() )
{
event_OP2_AllNodesScan.dbHit();
event_OP2_AllNodesScan.row();
final long v1 = v1Iter.next();

int count = v2.get( v1 );
if ( count == LongKeyIntValueTable.NULL )
{
v2.put( v1, 1 );
}
else
{
v2.put( v1, count + 1 );
}
}
}

return v2;
}
