/**
 * Copyright (c) 2002-2014 "Neo Technology,"
 * Network Engine for Objects in Lund AB [http://neotechnology.com]
 *
 * This file is part of Neo4j.
 *
 * Neo4j is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.neo4j.cypher.internal.compiler.v2_1.commands.expressions

import org.neo4j.cypher.internal.compiler.v2_1.ExecutionContext
import org.neo4j.cypher.internal.compiler.v2_1.symbols._
import org.neo4j.cypher.internal.compiler.v2_1.symbols.SymbolTable
import org.neo4j.cypher.internal.compiler.v2_1.pipes.QueryState

object ProjectedPath {
  type Step = (ExecutionContext, PathBuilder) => Unit
}

/*
 Expressions for materializing new paths (used by ronja)

 These expressions cannot be generated by the user directly
 */
case class ProjectedPath(symbolTableDependencies: Set[String], steps: ProjectedPath.Step*) extends Expression {
  private val builder = new PathBuilder

  def apply(ctx: ExecutionContext)(implicit state: QueryState): Any = {
    builder.clear()
    steps.foreach(_(ctx, builder))
    builder.result()
  }

  def arguments = Seq.empty

  def rewrite(f: (Expression) => Expression): Expression = f(this)

  def calculateType(symbols: SymbolTable): CypherType = CTPath
}


