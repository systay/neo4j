
``Cypher'' is a declarative graph query language that 
allows for expressive and efficient querying of the graph store without having to write traversals through the graph structure in code.
Cypher is still growing and maturing, and that means that there probably will be breaking syntax changes.
It also means that it has not undergone the same rigorous performance testing as the other components.

Cypher is designed to be a humane query language, suitable for both 
developers and (importantly, we think) operations professionals who 
want to make ad-hoc queries on the database. Its constructs are based 
on English prose and neat iconography, which helps to make it (somewhat) 
self-explanatory.

Cypher is inspired by a number of different approaches and builds upon
established practices for expressive querying. Most of the keywords like
+WHERE+ and +ORDER BY+ are inspired by http://en.wikipedia.org/wiki/SQL[SQL].
Pattern matching borrows expression approaches from http://en.wikipedia.org/wiki/SPARQL[SPARQL].
Regular expression matching is implemented using the http://www.scala-lang.org/[Scala programming language].

Cypher is a declarative language. It focuses on the clarity of expressing _what_
to retrieve from a graph, not _how_ to do it, in contrast to imperative languages like Java,
and scripting languages like http://gremlin.tinkerpop.com[Gremlin] (supported via the <<gremlin-plugin>>) 
and http://neo4j.rubyforge.org/[the JRuby Neo4j bindings]. This makes the concern of how to optimize
queries in implementation detail not exposed to the user.

The query language is comprised of several distinct parts.

* +START+: Starting points in the graph, obtained by element IDs or via index lookups

* +MATCH+: The graph pattern to match, bound to the starting points in +START+

* +WHERE+: Filtering criteria

* +RETURN+: What to return

Let's see three of them in action:

include::intro-examples.txt[]

To use Cypher from Java, see <<tutorials-cypher-java>>. For more Cypher examples, see even <<cypher-cookbook>>.


