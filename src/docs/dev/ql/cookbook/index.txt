[[cypher-cookbook]]
Cypher Cookbook
===============

The following cookbook aims to provide a few snippets, examples and use-cases and their query-solutions in Cypher.
FOr the Cypher reference documentation, see <<cypher-query-lang>>.

[[cypher-cookbook-hyperedges]]
== Hyperedges and Cypher ==

Imagine a user being part of different groups.
A group can have different roles, and a user can be part of different groups.
He also can have different roles in different groups apart from the membership.
The association of a User, a Group and a Role can be referred to as a _HyperEdge_.
However, it can be easily modeled in a property graph as a node that captures this n-ary relationship, as depicted below in the +U1G2R1+ node.

include::cypher-hyperedge-graph.txt[]

:leveloffset: 2

include::find-groups.txt[]

include::find-all-groups-and-roles-for-a-user.txt[]

:leveloffset: 1

[[cypher-cookbook-friend-finding]]
== Basic Friend finding based on social neighborhood ==

Imagine an example graph like

include::cypher-collabfiltering-graph.txt[]

:leveloffset: 2

include::simple-friend-finder.txt[]

:leveloffset: 1

[[cypher-cookbook-co-favorited-places]]
== Co-favorited places ==

:leveloffset: 2

include::cypher-cofavoritedplaces-graph.txt[]

include::co-favorited-places---users-who-like-x-also-like-y.txt[]

include::co-tagged-places---places-related-through-tags.txt[]

:leveloffset: 1

[[cypher-cookbook-similar-favorites]]
== Find people based on similar favorites ==

:leveloffset: 2

include::cypher-peoplesimilarityfavorites-graph.txt[]

include::find-people-based-on-similar-favorites.txt[]

:leveloffset: 1

[[cypher-cookbook-multirelational-social-network]]
== Multirelational (social) graphs ==

:leveloffset: 2

include::cypher-multirelationalsocialnetwork-graph.txt[]

include::who-follows-or-loves-me-back.txt[]

:leveloffset: 2

include::cypher-hyperedgecommongroups-graph.txt[]

include::find-common-groups-based-on-shared-roles.txt[]

//:leveloffset: 1

//== Activity Streams ==

//:leveloffset: 2

//include::cypher-graphity-graph.txt[]

//include::find-activity-streams-in-a-network-without-scaling-penalty.txt[]

//== People Similarity based on Favorites ==

//include::cypher-collabfiltering-graph.txt[]

